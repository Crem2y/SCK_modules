#pragma once

#include "../sck_key_define.h"
#include "../sck_key_code.h"

byte SCK_KM_keyset[KEY_LAYERS][KM_V][KM_H] = { // for Keyboard Module (FN, V, H)
  {{0xB1,K___,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD}, // normal key layer
   {'`' ,'1' ,'2' ,'3' ,'4' ,'5' ,'6' ,'7' ,'8' ,'9' ,'0' ,'-' ,'=' ,0xB2},
   {0xB3,'q' ,'w' ,'e' ,'r' ,'t' ,'y' ,'u' ,'i' ,'o' ,'p' ,'[' ,']' ,'\\'},
   {0xC1,'a' ,'s' ,'d' ,'f' ,'g' ,'h' ,'j' ,'k' ,'l' ,';' ,'\'',K___,0xB0},
   {0x81,'z' ,'x' ,'c' ,'v' ,'b' ,'n' ,'m' ,',' ,'.' ,'/' ,K___,K___,0x85},
   {0x80,0x83,0x82,K___,K___,' ' ,K___,K___,K___,0x86,FK_1,FK_2,K___,0x84}},

  {{D_RS,K___,C_CA,C_VD,C_VU,C_VM,C_MS,C_MR,C_MP,C_MN,C_EM,C_BH,C_BB,C_BF}, // fn1 key layer
   {D_PG,'1' ,'2' ,'3' ,'4' ,'5' ,'6' ,'7' ,'8' ,L_SD,L_SL,L_KD,L_KL,0xB2},
   {0xB3,'q' ,0xDA,'e' ,'r' ,'t' ,'y' ,'u' ,'i' ,'o' ,'p' ,L_SC,L_KC,'\\'},
   {0xC1,0xD8,0xD9,0xD7,'f' ,'g' ,'h' ,'j' ,'k' ,'l' ,';' ,'\'',K___,0xB0},
   {0x81,'z' ,'x' ,'c' ,'v' ,'b' ,'n' ,'m' ,',' ,'.' ,'/' ,K___,K___,0x85},
   {0x80,0x83,0x82,K___,K___,' ' ,K___,K___,K___,0x86,FK_1,0xD8,K___,0xD7}},

  {{0xB1,K___,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,F_03,0xCC,0xCD}, // fn2 key layer
   {'`' ,'1' ,'2' ,'3' ,'4' ,'5' ,'6' ,'7' ,'8' ,'9' ,'0' ,'-' ,'=' ,0xB2},
   {0xB3,'q' ,'w' ,'e' ,'r' ,'t' ,'y' ,'u' ,'i' ,'o' ,'p' ,'[' ,']' ,'\\'},
   {0xC1,'a' ,'s' ,'d' ,'f' ,'g' ,'h' ,'j' ,'k' ,'l' ,';' ,'\'',K___,0xB0},
   {0x81,'z' ,'x' ,'c' ,'v' ,'b' ,'n' ,'m' ,',' ,'.' ,'/' ,K___,K___,0x85},
   {0x80,0x83,0x82,K___,K___,' ' ,K___,K___,K___,0x86,0x00,FK_2,K___,0x84}}
};

byte SCK_FM_keyset[KEY_LAYERS][FM_V][FM_H] = { // for Fnkey Module (FN, V, H)
  {{0xCE,0xCF,0xD0}, // normal key layer
   {0xD1,0xD2,0xD3},
   {0xD4,0xD5,0xD6},
   {K___,0xDA,K___},
   {0xD8,0xD9,0xD7}},

  {{0xCE,0xCF,0xD0}, // fn1 key layer
   {0xD1,D_01,0xD3},
   {0xD4,D_02,0xD6},
   {K___,0xDA,K___},
   {0xD8,0xD9,0xD7}},

  {{0xCE,0xCF,0xD0}, // fn2 key layer
   {0xD1,0xD2,0xD3},
   {0xD4,0xD5,0xD6},
   {K___,0xDA,K___},
   {0xD8,0xD9,0xD7}}
};

byte SCK_PM_keyset[KEY_LAYERS][PM_V][PM_H] = { // for keyPad Module (FN, V, H)
  {{0xDB,0xDC,0xDD,0xDE}, // normal key layer
   {0xE7,0xE8,0xE9,0xDF},
   {0xE4,0xE5,0xE6,K___},
   {0xE1,0xE2,0xE3,0xE0},
   {0xEA,K___,0xEB,K___}},

  {{0xDB,0xDC,0xDD,0xDE}, // fn1 key layer
   {0xD2,0xDA,0xD3,0xDF},
   {0xD8,0xE5,0xD7,K___},
   {0xD5,0xD9,0xD6,0xE0},
   {0xD1,K___,0xD4,K___}},

  {{M_LB,M_MB,M_RB,MH_U}, // fn2 key layer
   {M_UL,M_U ,M_UR,MH_D},
   {M_L ,M_LB,M_R ,K___},
   {M_DL,M_D ,M_DR,0xE0},
   {M_S ,K___,M_F ,K___}}
};

// -- How to set the mode-code --
// set bit 7~0, if key is {1,2,3,4}
// bit 7 : rsw ccw toggle mode? (not recommended)
// bit 6 : rsw ccw repeat mode? (not recommended)
// bit 5 : rsw cw  toggle mode? (not recommended)
// bit 4 : rsw cw  repeat mode? (not recommended)
// bit 3 : rsw sw toggle mode?
// bit 2 : rsw sw repeat mode?
// bit 1 : key 1 toggle mode?
// bit 0 : key 1 repeat mode? 

// bit 7 : key 2 toggle mode?
// bit 6 : key 2 repeat mode?
// bit 5 : key 3 toggle mode?
// bit 4 : key 3 repeat mode?
// bit 3 : key 4 toggle mode?
// bit 2 : key 4 repeat mode?
// bit 1 : key 5 toggle mode?
// bit 0 : key 5 repeat mode? 

byte SCK_MM_keyset[KEY_LAYERS][MM_V+2][MM_H] = { // for Macro Module (FN, V, MM_num)
  {{0x00,0x00,0x00,0x00,0x00}, // normal key layer
   {0x00,0x00,0x00,0x00,0x00},
   {MH_U,M_F ,0x00,0x00,0x00}, // key data start
   {MH_D,M_S ,0x00,0x00,0x00},
   {0xD1,'f' ,0x00,0x00,0x00},
   {0xD4,']' ,0x00,0x00,'1' },
   {0xD2,'[' ,0x00,0x00,'2' },
   {0xD3,'l' ,0x00,0x00,'3' },
   {0xD6,'s' ,0x00,0x00,'4' },
   {0xD5,'w' ,0x00,0x00,'5' }},

  {{0x00,0x00,0x00,0x00,0x00}, // fn1 key layer
   {0x00,0x00,0x00,0x00,0x00},
   {0xD8,0xDD,0x00,0x00,0x00}, // key data start
   {0xD7,0xDC,0x00,0x00,0x00},
   {0x00,0xEB,0x00,0x00,0x00},
   {0xCE,F_26,0x00,0x00,0x00},
   {0xCF,F_27,0x00,0x00,0x00},
   {0xD0,F_28,0x00,0x00,0x00},
   {0x00,F_29,0x00,0x00,0x00},
   {0x00,F_30,0x00,0x00,0x00}},

  {{0x00,0x00,0x00,0x00,0x00}, // fn2 key layer
   {0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00}, // key data start
   {0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00}}
};